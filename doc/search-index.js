var searchIndex = JSON.parse('{\
"usbh":{"doc":"Experimental host-side USB stack for embedded devices.","t":"NNNNENNNNENNNNNDENNNDNLLLLLLLLLLALLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLANNNNNENEIDNNNNNNNNLLLLLLMLLKKLLLLLLLKLLLKKKKMKKKKKKKLLLLLLLLLKLKKNNDDNDDDDDNNDNNENRRRRREMMMMLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLMMMMMMMMLAMLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMFFFFFFFIKKKKKKKKAAAALDLLLLLLLLLLLLLNNSNNNSSSSSDNNDSNNDNDEENDNNSNSNSENNDNNNSNSNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNDNDEEEDNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSSSSSSSDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNENDNNNNDELLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLMMLLLLLLLLLLLLLLLLM","n":["Attached","BusError","BusError","Busy","ControlError","ControlInData","ControlOutComplete","Detached","DiscoveryError","Event","Idle","InterruptPipe","InvalidPipe","NoDevice","None","PipeId","PollResult","Resume","Sof","Stall","UsbHost","WouldBlock","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bus","bus","clone","clone","clone","control_in","control_out","create_control_pipe","create_interrupt_pipe","descriptor","driver","eq","eq","format","format","from","from","from","from","from","get_descriptor","get_status","into","into","into","into","into","ls_preamble","new","poll","release_pipe","reset","set_configuration","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","types","Attached","BitStuffing","Crc","DataSequence","Detached","Error","Error","Event","HostBus","InterruptPipe","InterruptPipe","Other","Resume","RxOverflow","RxTimeout","Sof","Stall","TransComplete","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bus_ref","clone","clone","create_interrupt_pipe","enable_sof","eq","eq","format","format","from","from","from","interrupt_on_sof","into","into","into","ls_preamble","pipe_continue","poll","prepare_data_out","ptr","received_data","release_interrupt_pipe","reset_bus","reset_controller","set_recipient","sof_enabled","stop_transaction","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_data_in","write_data_out","write_data_out_prepared","write_setup","Adaptive","Asynchronouse","ConfigurationAttributes","ConfigurationDescriptor","Data","Descriptor","DeviceDescriptor","EndpointAddress","EndpointAttributes","EndpointDescriptor","Feedback","ImplicitFeedbackData","InterfaceDescriptor","NoSynchronization","Reserved","SynchronizationType","Synchronous","TYPE_CONFIGURATION","TYPE_DEVICE","TYPE_ENDPOINT","TYPE_INTERFACE","TYPE_STRING","UsageType","address","alternate_setting","attributes","attributes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","data","descriptor_type","device_class","device_protocol","device_release","device_sub_class","direction","format","format","format","format","format","format","format","from","from","from","from","from","from","from","from","from","from","id_product","id_vendor","index","interface_class","interface_index","interface_number","interface_protocol","interface_sub_class","interval","into","into","into","into","into","into","into","into","into","into","length","manufacturer_index","max_packet_size","max_packet_size","max_power","num_configurations","num_endpoints","num_interfaces","number","parse","product_index","remote_wakeup","self_powered","serial_number_index","synchronization_type","total_length","transfer_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","usage_type","usb_release","value","any_descriptor","bcd_16","configuration_descriptor","configuration_descriptor_length","device_descriptor","endpoint_descriptor","interface_descriptor","Driver","attached","completed_control","completed_in","completed_out","configure","configured","descriptor","detached","detector","hub","kbd","log","stall","SimpleDetector","attached","borrow","borrow_mut","configure","configured","default","descriptor","detached","from","into","try_from","try_into","type_id","CConnection","CEnable","CONNECTION","COverCurrent","CReset","CSuspend","C_CONNECTION","C_ENABLE","C_OVER_CURRENT","C_RESET","C_SUSPEND","Characteristics","Connection","ControlError","DeviceRemovable","ENABLE","Enable","HubAdded","HubDescriptor","HubDescriptor","HubDriver","HubError","HubEvent","HubRemoved","HubStatus","HubStatus","HubStatusChange","LOW_SPEED","LowSpeed","OVER_CURRENT","OverCurrent","POWER","PortFeature","PortFeatureClear","PortFeatureSet","PortStatus","PortStatus","PortStatusChange","Power","RESET","Reset","SUSPEND","Stall","Suspend","UnknownDevice","all","attached","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","characteristics","clear_port_feature","clone","clone","clone","clone","clone","clone","clone","clone","cmp","complement","completed_control","completed_in","completed_out","configure","configured","contains","control_current","descriptor","detached","device_removable","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","format","format","format","format","format","format","format","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_hub_descriptor","get_hub_status","get_port_status","hash","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","is_all","is_empty","new","not","partial_cmp","port_count","power_on_to_good","remove","set","set_port_feature","stall","sub","sub_assign","symmetric_difference","take_event","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","CapsLock","Compose","ControlComplete","ControlError","DeviceAdded","DeviceRemoved","InputChanged","InputReport","Kana","KbdDriver","KbdError","KbdEvent","KbdLed","ModifierStatus","NumLock","ScrollLock","UnknownDevice","attached","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","completed_control","completed_in","completed_out","configure","configured","descriptor","detached","fmt","format","format","format","from","from","from","from","from","from","from","into","into","into","into","into","into","keypress","left_alt","left_ctrl","left_gui","left_shift","modifier_status","new","pressed_keys","right_alt","right_ctrl","right_gui","right_shift","set_idle","set_led","take_event","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","ATTACHED","COMPLETED_CONTROL","COMPLETED_IN","COMPLETED_OUT","CONFIGURE","CONFIGURED","DESCRIPTOR","DETACHED","EventMask","LogDriver","all","attached","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","cmp","complement","completed_control","completed_in","completed_out","configure","configured","contains","descriptor","detached","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","format","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","is_all","is_empty","new","not","partial_cmp","remove","set","stall","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","Bcd16","Bulk","ConnectionSpeed","Control","DeviceAddress","Full","Interrupt","Isochronous","Low","SetupPacket","TransferType","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","eq","eq","eq","eq","format","format","format","from","from","from","from","from","index","into","into","into","into","into","length","new","request","request_type","to_digits","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value"],"q":[[0,"usbh"],[81,"usbh::bus"],[146,"usbh::descriptor"],[291,"usbh::descriptor::parse"],[298,"usbh::driver"],[312,"usbh::driver::detector"],[326,"usbh::driver::hub"],[511,"usbh::driver::kbd"],[604,"usbh::driver::log"],[679,"usbh::types"]],"d":["","The host bus encountered an error","","Bus is currently busy talking to a device. Calling any …","Error initiating a control transfer","","","","An error happened during discovery.","Internal event type, used by <code>poll</code> and the enumeration …","A device is attached and the bus is available. The caller …","","A control transfer was initiated using an invalid <code>PipeId</code>.","There is no device attached. It does not make sense to do …","","Handle for a pipe","Result returned from <code>UsbHost::poll</code>.","","","","Entrypoint for the USB host stack","Indicates that the bus is currently busy with another …","","","","","","","","","","","Interface for host bus hardware","","","","","Initiate an IN transfer on the control endpoint of the …","Initiate an OUT transfer on the control endpoint of the …","Create a pipe for control transfers","Create a pipe for interrupt transfers","Types for (standard) descriptors","Interface for implementing drivers","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Initiate a <code>Get_Descriptor</code> (0x06) control IN transfer","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Initialize the USB host stack","Poll the USB host. This must be called reasonably often.","","Reset the entire host stack","Initiate a <code>Set_Configuration</code> (0x09) control OUT transfer","","","","","","","","","","","","","","","","Common types used throughout the crate","A new device was attached, with given speed","Bit stuffing rules were not followed","CRC mismatch","Data sequence error. Saw DATA0 when expecting DATA1 or …","The device is no longer attached","","An error has occured (details in the Error)","","Interface for host bus hardware","Result from <code>create_interrupt_pipe</code>","Data from interrupt pipe is available to be read or written","None of the above. Hardware specific error condition.","Device has resumed from sleep?","Data was received faster than it could be processed","Expected data to be received, but it did not arrive in time","A start-of-frame packet has been sent","Device sent a STALL. This usually means that the device …","A control transaction (SETUP, DATA IN or DATA OUT) has …","","","","","","","Reference for this pipe generated by the host bus","","","Create an interrupt pipe","Enable sending SOF (for full-speed) or keep-alive (for …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Enable/disable interrupt on SOF","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Signal that a pipe can continue transfers","Check if there is an event pending on the bus, if there is …","Load the given <code>data</code> into the output buffer","Pointer to the buffer for this pipe","Access the input buffer for a recent transfer","Release a pipe created with <code>create_interrupt_pipe</code>","Reset the bus, but keep the controller initialized.","Reset the controller into it’s initial state.","Set device address, endpoint and transfer type for an …","Check if SOF packets are currently enabled","Stop current transaction, if there is one in progress","","","","","","","","","","Write a DATA IN packet to the bus, then receive <code>length</code> …","Write a DATA OUT packet to the bus, after loading the …","Write a DATA OUT packet to the bus, assuming the buffers …","Write a SETUP packet to the bus","","","","The configuration descriptor describes information about a …","","Outer framing of a descriptor","A device descriptor describes general information about a …","Address of an endpoint","Attributes of an endpoint","Each endpoint used for an interface has its own descriptor.","","","The interface descriptor describes a specific interface …","","","Synchronization type for an Isochronous endpoint","","<code>descriptor_type</code> identifying a <code>ConfigurationDescriptor</code>","<code>descriptor_type</code> identifying a <code>DeviceDescriptor</code>","<code>descriptor_type</code> identifying an <code>EndpointDescriptor</code>","<code>descriptor_type</code> identifying an <code>InterfaceDescriptor</code>","<code>descriptor_type</code> identifying a <code>StringDescriptor</code> (not yet …","Usage type for an Isochronous endpoint","The address of the endpoint on the USB device described by …","Value used to select this alternate setting for the …","Configuration characteristics","This field describes the endpoint’s attributes when it …","","","","","","","","","","","","","","","","","","","","","","","","","","Remaining data of the descriptor. Usually <code>length - 2</code> bytes …","Type of descriptor. If this is a standard descriptor, it …","Class code (assigned by the USB-IF).","Protocol code (assigned by the USB-IF). These codes are …","Device release number in binary-coded decimal","Subclass code (assigned by the USB-IF).","Direction of the endpoint","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Product ID (assigned by the manufacturer)","Vendor ID (assigned by the USB-IF)","Index of string descriptor describing this configuration","Class code (assigned by the USB-IF).","Index of string descriptor describing this interface","Number of this interface.","Protocol code (assigned by the USB).","Subclass code (assigned by the USB-IF).","Interval for polling endpoint for data transfers.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Total length of the descriptor, including this length byte …","Index of string descriptor describing manufacturer","Maximum packet size for endpoint zero","Maximum packet size this endpoint is capable of sending or …","Maximum power consumption of the USB device from the bus …","Number of possible configurations","Number of endpoints used by this interface (excluding …","Number of interfaces supported by this configuration","Endpoint number","","Index of string descriptor describing product","Device supports remote wakeup","A device configuration reports whether the configuration …","Index of string descriptor describing the device’s …","Synchronization type. Only valid for Isochronous endpoint.","Total length of data returned for this configuration.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Usage type. Only valid for Isochronous endpoint.","USB Specification Release Number in Binary-Coded Decimal …","Value to use as an argument to the SetConfiguration() …","Parse outer framing of a descriptor","Parses a 16-bit binary coded decimal value","Parse descriptor data for a configuration","Parse only the <code>total_length</code> from a (partial) configuration …","Parse descriptor data for a device","Parse descriptor data for an endpoint","Parse descriptor data for an interface","The Driver trait","New device was attached, and got assigned the given …","Called when a control transfer was completed on the given …","Called when data was received on the given IN pipe","Called when new data is needed for the given OUT pipe","The host is asking the driver to configure the device.","Informs the driver that a given configuration was selected …","A descriptor was received for the device","The device with the given address was detached.","Helpers for detecting USB devices from drivers","","","","Called when a device sends a STALL","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Error initiating control transfer","","","","","","","A <code>Driver</code> which logs various events","Error type for interactions with the driver","","","","","","","","","","","","","","","","","","","","","","","The given <code>DeviceAddress</code> is not known.","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","","","","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","A control transfer has completed.","Error initiating control transfer","A new keyboard was detected &amp; configured, with given …","A keyboard was removed","The input report changed for one of the devices.","Represents an input report, received from a keyboard","","Driver for boot keyboards","Error type for interactions with the driver","Events related to attached keyboard(s)","Identifies the five LEDs that a boot keyboard can support","","","","The given <code>DeviceAddress</code> is not known.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Is left <code>Alt</code> pressed?","Is left <code>Ctrl</code> pressed?","Is left <code>Gui</code> pressed?","Is left <code>Shift</code> pressed?","Status of modifier keys","","","Is right <code>Alt</code> pressed?","Is right <code>Ctrl</code> pressed?","Is right <code>Gui</code> pressed?","Is right <code>Shift</code> pressed?","Set interval for idle reports","Set the given <code>KbdLed</code> to the specified state.","Returns the last keyboard event that occurred (if any) and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Used to select which events are logged by the <code>LogDriver</code>","A <code>Driver</code> which logs various events","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Returns the complement of this set of flags.","","","","","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Represents a 16-bit binary-coded-decimal value","","Refers to the speed at which a device operates","","An address that was assigned to a device by the host.","USB 1.0 full speed","","","USB 1.0 low speed","Represents a setup packet","Represents one of the four transfer types that USB supports","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Construct a setup packet for for a control transfer","","","Returns the four contained digits as separate numbers","","","","","","","","","","","","","","","",""],"i":[4,18,4,18,0,4,4,4,18,0,18,4,3,18,4,0,0,4,4,4,0,3,18,3,4,2,5,18,3,4,2,5,0,2,3,4,5,2,2,2,2,0,0,3,5,4,5,18,3,4,2,5,2,2,18,3,4,2,5,2,2,2,2,2,2,18,3,4,2,5,18,3,4,2,5,18,3,4,2,5,0,20,21,21,21,20,0,20,0,0,0,20,21,20,21,21,20,20,20,22,20,21,22,20,21,22,20,21,1,1,20,21,20,21,22,20,21,1,22,20,21,1,1,1,1,22,1,1,1,1,1,1,1,22,20,21,22,20,21,22,20,21,1,1,1,1,28,28,0,0,29,0,0,0,0,0,29,29,0,28,29,0,28,0,0,0,0,0,0,33,32,31,33,34,30,31,25,32,33,26,27,28,29,34,30,31,25,32,33,26,27,28,29,25,26,27,28,29,34,34,30,30,30,30,26,30,31,25,32,33,26,27,34,30,31,25,32,33,26,27,28,29,30,30,31,32,32,32,32,32,33,34,30,31,25,32,33,26,27,28,29,34,30,30,33,31,30,32,31,26,0,30,25,25,30,27,31,27,34,30,31,25,32,33,26,27,28,29,34,30,31,25,32,33,26,27,28,29,34,30,31,25,32,33,26,27,28,29,27,30,31,0,0,0,0,0,0,0,0,17,17,17,17,17,17,17,17,0,0,0,0,17,0,38,38,38,38,38,38,38,38,38,38,38,38,38,42,42,39,42,42,42,39,39,39,39,39,0,42,43,0,39,42,47,0,47,0,0,0,47,0,47,47,39,42,39,42,39,0,47,47,0,47,47,42,39,42,39,47,42,43,39,40,39,39,39,39,39,39,39,40,44,45,46,42,47,39,48,43,40,44,45,46,42,47,39,48,43,44,40,44,45,46,42,47,39,48,43,39,39,40,40,40,40,40,39,44,40,40,44,39,39,42,39,39,39,39,39,39,39,44,45,46,42,47,39,48,40,44,45,46,42,47,39,48,43,43,39,39,39,39,40,40,40,39,39,39,39,40,44,45,46,42,47,39,48,43,39,39,40,39,39,44,44,39,39,40,40,39,39,39,40,39,40,44,45,46,42,47,39,48,43,40,44,45,46,42,47,39,48,43,40,44,45,46,42,47,39,48,43,39,58,58,57,59,57,57,57,0,58,0,0,0,0,0,58,58,59,54,54,55,56,57,58,59,54,55,56,57,58,59,55,56,57,58,59,54,54,54,54,54,54,54,56,55,56,57,54,55,56,57,58,59,59,54,55,56,57,58,59,55,56,56,56,56,55,54,55,56,56,56,56,54,54,54,54,55,55,56,57,58,59,54,55,56,57,58,59,54,55,56,57,58,59,61,61,61,61,61,61,61,61,0,0,61,62,61,61,61,61,61,61,61,62,61,62,61,61,61,61,62,62,62,62,62,61,62,62,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,62,61,61,61,62,61,61,61,61,62,61,61,61,61,62,61,62,61,62,61,61,0,24,0,24,0,37,24,24,37,0,0,8,6,36,37,24,8,6,36,37,24,6,36,37,24,6,36,37,24,6,36,37,8,6,36,37,24,8,8,6,36,37,24,8,8,8,8,36,8,6,36,37,24,8,6,36,37,24,8,6,36,37,24,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[2,[1]]],1],[3,3],[4,4],[5,5],[[[2,[1]],[7,[6]],[7,[5]],8],[[9,[3]]]],[[[2,[1]],[7,[6]],[7,[5]],8,[11,[10]]],[[9,[3]]]],[[[2,[1]],6],[[7,[5]]]],[[[2,[1]],6,10,12,13,10],[[7,[5]]]],0,0,[[3,3],14],[[5,5],14],[[4,15]],[[5,15]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],[7,[6]],[7,[5]],16,10,10,13],[[9,[3]]]],[[[2,[1]],6,5,16],[[9,[3]]]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],14]],[1,[[2,[1]]]],[[[2,[1]],[11,[17]]],18],[[[2,[1]],5]],[[[2,[1]]]],[[[2,[1]],6,[7,[5]],10],[[9,[3]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[20,20],[21,21],[[6,10,12,13,10],[[7,[22]]]],[[]],[[20,20],14],[[21,21],14],[[20,15]],[[21,15]],[[]],[[]],[[]],[14],[[]],[[]],[[]],[14],[10],[[],[[7,[20]]]],[[[11,[10]]]],0,[23,[[11,[10]]]],[10],[[]],[[]],[[[7,[6]],10,24]],[[],14],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],19],[[],19],[[],19],[[13,14]],[[[11,[10]]]],[[]],[8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,25],[26,26],[27,27],[28,28],[29,29],0,0,0,0,0,0,[26,12],[[30,15]],[[31,15]],[[25,15]],[[32,15]],[[33,15]],[[26,15]],[[27,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[26,10],0,0,[25,14],[25,14],0,[27,28],0,[27,24],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[27,29],0,0,[[[11,[10]]],[[35,[[11,[10]],34]]]],[[[11,[10]]],[[35,[[11,[10]],36]]]],[[[11,[10]]],[[35,[[11,[10]],31]]]],[[[11,[10]]],[[35,[[11,[10]],13]]]],[[[11,[10]]],[[35,[[11,[10]],30]]]],[[[11,[10]]],[[35,[[11,[10]],33]]]],[[[11,[10]]],[[35,[[11,[10]],32]]]],0,[[6,37]],[[6,5,[7,[[11,[10]]]]]],[[6,5,[11,[10]]]],[[6,5,[11,[10]]]],[6,[[7,[10]]]],[[6,10,2]],[[6,10,[11,[10]]]],[6],0,0,0,0,[6],0,[[38,6]],[[]],[[]],[[38,6],[[7,[10]]]],[[38,6,10],7],[[],38],[[38,6,10,[11,[10]]]],[[38,6]],[[]],[[]],[[],9],[[],9],[[],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],39],[[40,6,37]],[[39,39],39],[[39,39]],[[39,39],39],[[39,39]],[39,41],[[39,39],39],[[39,39]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[40,6,10,42,[2,[1]]],[[9,[43]]]],[44,44],[45,45],[46,46],[42,42],[47,47],[39,39],[48,48],[43,43],[[39,39],49],[39,39],[[40,6,5,[7,[[11,[10]]]]]],[[40,6,5,[11,[10]]]],[[40,6,5,[11,[10]]]],[[40,6],[[7,[10]]]],[[40,6,10,[2,[1]]]],[[39,39],14],0,[[40,6,10,[11,[10]]]],[[40,6]],0,[[39,39],39],[[],39],[[42,42],14],[[39,39],14],[[39,50]],[[39,51],52],[[39,51],52],[[39,51],52],[[39,51],52],[[39,51],52],[[44,15]],[[45,15]],[[46,15]],[[42,15]],[[47,15]],[[39,15]],[[48,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,43],[[]],[41,[[7,[39]]]],[41,39],[41,39],[50,39],[[40,6,[2,[1]]],[[9,[43]]]],[[40,6,[2,[1]]],[[9,[43]]]],[[40,6,10,[2,[1]]],[[9,[43]]]],[[39,53]],[[39,39]],[[39,39],39],[[39,39],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,14],[39,14],[[],40],[39,39],[[39,39],[[7,[49]]]],0,0,[[39,39]],[[39,39,14]],[[40,6,10,42,[2,[1]]],[[9,[43]]]],[[40,6]],[[39,39],39],[[39,39]],[[39,39],39],[40,[[7,[47]]]],[[39,39]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[39,39],39],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[54,6,37]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[55,55],[56,56],[57,57],[58,58],[59,59],[[54,6,5,[7,[[11,[10]]]]]],[[54,6,5,[11,[10]]]],[[54,6,5,[11,[10]]]],[[54,6],[[7,[10]]]],[[54,6,10,[2,[1]]]],[[54,6,10,[11,[10]]]],[[54,6]],[[56,51],52],[[55,15]],[[56,15]],[[57,15]],[[]],[[]],[[]],[[]],[[]],[[]],[3,59],[[]],[[]],[[]],[[]],[[]],[[]],0,[56,14],[56,14],[56,14],[56,14],0,[[],54],[55,60],[56,14],[56,14],[56,14],[56,14],[[54,6,10,[2,[1]]],[[9,[59]]]],[[54,6,58,14,[2,[1]]],[[9,[59]]]],[54,[[7,[57]]]],[[],9],[[[11,[10]]],[[9,[55]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],0,0,0,0,0,0,0,0,0,0,[[],61],[[62,6,37]],[[61,61],61],[[61,61]],[[61,61],61],[[61,61]],[61,10],[[61,61],61],[[61,61]],[[]],[[]],[[]],[[]],[61,61],[[61,61],49],[61,61],[[62,6,5,[7,[[11,[10]]]]]],[[62,6,5,[11,[10]]]],[[62,6,5,[11,[10]]]],[[62,6],[[7,[10]]]],[[62,6,10,[2,[1]]]],[[61,61],14],[[62,6,10,[11,[10]]]],[[62,6]],[[61,61],61],[[],61],[[61,61],14],[[61,50]],[[61,51],52],[[61,51],52],[[61,51],52],[[61,51],52],[[61,51],52],[[61,15]],[[]],[[]],[10,[[7,[61]]]],[10,61],[10,61],[50,61],[[61,53]],[[61,61]],[[61,61],61],[[61,61],14],[[]],[[]],[61,14],[61,14],[61,62],[61,61],[[61,61],[[7,[49]]]],[[61,61]],[[61,61,14]],[[62,6]],[[61,61],61],[[61,61]],[[61,61],61],[[61,61]],[[],9],[[],9],[[],9],[[],9],[[],19],[[],19],[[61,61],61],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[36,36],[37,37],[24,24],[[6,6],14],[[36,36],14],[[37,37],14],[[24,24],14],[[6,15]],[[36,15]],[[37,15]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],0,[[12,63,16,10,13,13,13],8],0,0,[36,[[64,[10]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],19],[[],19],[[],19],[[],19],[[],19],0],"c":[],"p":[[8,"HostBus"],[3,"UsbHost"],[4,"ControlError"],[4,"Event"],[3,"PipeId"],[3,"DeviceAddress"],[4,"Option"],[3,"SetupPacket"],[4,"Result"],[15,"u8"],[15,"slice"],[4,"UsbDirection"],[15,"u16"],[15,"bool"],[3,"Formatter"],[4,"Recipient"],[8,"Driver"],[4,"PollResult"],[3,"TypeId"],[4,"Event"],[4,"Error"],[3,"InterruptPipe"],[15,"usize"],[4,"TransferType"],[3,"ConfigurationAttributes"],[3,"EndpointAddress"],[3,"EndpointAttributes"],[4,"SynchronizationType"],[4,"UsageType"],[3,"DeviceDescriptor"],[3,"ConfigurationDescriptor"],[3,"InterfaceDescriptor"],[3,"EndpointDescriptor"],[3,"Descriptor"],[6,"IResult"],[3,"Bcd16"],[4,"ConnectionSpeed"],[3,"SimpleDetector"],[3,"PortStatus"],[3,"HubDriver"],[15,"u32"],[4,"PortFeature"],[4,"HubError"],[3,"HubDescriptor"],[3,"Characteristics"],[3,"DeviceRemovable"],[4,"HubEvent"],[3,"HubStatus"],[4,"Ordering"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[3,"KbdDriver"],[3,"InputReport"],[3,"ModifierStatus"],[4,"KbdEvent"],[4,"KbdLed"],[4,"KbdError"],[8,"Iterator"],[3,"EventMask"],[3,"LogDriver"],[4,"RequestType"],[15,"array"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
